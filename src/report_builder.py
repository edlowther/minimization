import time
import pandas as pd
import seaborn as sns

class ReportBuilder(): 
    """Generate a markdown file to communicate which group the new trial participant has been allocated
    and some analysis of allocations to date, to help ensure that minimisation is working as expected"""
    def __init__(self, commit_hash): 
        self.output = ['# Minimization']
        self.commit_hash = commit_hash

    def add_error(self, error_message): 
        """Error messages generated by the `Participant` class are handled here"""
        self.output.append(error_message)

    def add_success(self, participant_id, new_participant_assignment): 
        """If the new data is valid, the allocation is reported here"""
        self.output.append(f'## New participant with id {participant_id} assigned to: {new_participant_assignment}\n')

    def make_chart(self, updated_allocations_df, stratification_classes, classname_lookup):
        """Wrangle the data into a format that lends itself to visualisation, then use the 
        commit hash to distinguish the updated filename for a saved chart from its predecessors"""
        chart_df = pd.melt(updated_allocations_df.drop('participant_id', axis=1), id_vars=['allocation'], var_name='category', value_name='count')
        chart_df['class'] = chart_df['category'].apply(lambda value: classname_lookup[value])
        chart_df = chart_df.groupby(['allocation', 'class', 'category'])['count'].sum().reset_index()
        p = sns.catplot(chart_df, x='count', y='category', col='class', hue='allocation', kind='bar', 
                        sharey=False, color='lightblue', margin_titles=True, height=2.8);
        timestamp = time.strftime('%d/%m/%Y %H:%M:%S')
        p.fig.text(0, 0, f'Updated: {timestamp}')
        p.savefig(f'./chart_{self.commit_hash}.png')
        self.output.append('### Updated distribution of trial participants:')
        self.output.append(f'![Chart](./chart_{self.commit_hash}.png)')

    def analyse_metadata(self, allocations_df): 
        """Tally the allocations so far"""
        n = len(allocations_df)
        self.output.append(f'Total number of participants allocated so far: {n}\n')
        control_n =      len(allocations_df[allocations_df['allocation'] == 'Control'])
        intervention_n = len(allocations_df[allocations_df['allocation'] == 'Intervention'])
        self.output.append(
            f'Of which {control_n} are in the Control group and {intervention_n} are in the Intervention group'
        )
    
    def make_table(self, allocations_df):
        """Generate a markdown table so that research team can easily look up allocation by participant id"""
        self.output.append('\n|Id|Cancer type|Hospital|Allocation|')
        self.output.append('|---:|:---|:---|:---|')
        for _, row in allocations_df.sort_values('participant_id').iterrows():
            mask = [i for i in row.index if i not in ['participant_id', 'allocation']]
            masked_row = row[mask]
            filtered_row = masked_row[masked_row > 0]
            cancer_type, hospital = filtered_row.index
            self.output.append(f"|{row['participant_id']}|{cancer_type}|{hospital}|{row['allocation']}|")

    def write_report(self): 
        """Output the finished report as `README.md`"""
        with open('./README.md', 'w') as f: 
            f.write('\n'.join(self.output))
